/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.radarcns.phoneSensors;  
@SuppressWarnings("all")
/** Data from the gps and network location providers. */
@org.apache.avro.specific.AvroGenerated
public class PhoneSensorAudio extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PhoneSensorAudio\",\"namespace\":\"org.radarcns.phoneSensors\",\"doc\":\"Data from the gps and network location providers.\",\"fields\":[{\"name\":\"time\",\"type\":\"double\",\"doc\":\"device timestamp in UTC (s)\"},{\"name\":\"timeReceived\",\"type\":\"double\",\"doc\":\"device receiver timestamp in UTC (s)\"},{\"name\":\"config\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"openSMILE configuration file\"},{\"name\":\"data\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"audio or features recorded in Base64 format\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** device timestamp in UTC (s) */
  @Deprecated public double time;
  /** device receiver timestamp in UTC (s) */
  @Deprecated public double timeReceived;
  /** openSMILE configuration file */
  @Deprecated public java.lang.String config;
  /** audio or features recorded in Base64 format */
  @Deprecated public java.lang.String data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PhoneSensorAudio() {}

  /**
   * All-args constructor.
   */
  public PhoneSensorAudio(java.lang.Double time, java.lang.Double timeReceived, java.lang.String config, java.lang.String data) {
    this.time = time;
    this.timeReceived = timeReceived;
    this.config = config;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return timeReceived;
    case 2: return config;
    case 3: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Double)value$; break;
    case 1: timeReceived = (java.lang.Double)value$; break;
    case 2: config = (java.lang.String)value$; break;
    case 3: data = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * device timestamp in UTC (s)   */
  public java.lang.Double getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * device timestamp in UTC (s)   * @param value the value to set.
   */
  public void setTime(java.lang.Double value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)   */
  public java.lang.Double getTimeReceived() {
    return timeReceived;
  }

  /**
   * Sets the value of the 'timeReceived' field.
   * device receiver timestamp in UTC (s)   * @param value the value to set.
   */
  public void setTimeReceived(java.lang.Double value) {
    this.timeReceived = value;
  }

  /**
   * Gets the value of the 'config' field.
   * openSMILE configuration file   */
  public java.lang.String getConfig() {
    return config;
  }

  /**
   * Sets the value of the 'config' field.
   * openSMILE configuration file   * @param value the value to set.
   */
  public void setConfig(java.lang.String value) {
    this.config = value;
  }

  /**
   * Gets the value of the 'data' field.
   * audio or features recorded in Base64 format   */
  public java.lang.String getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * audio or features recorded in Base64 format   * @param value the value to set.
   */
  public void setData(java.lang.String value) {
    this.data = value;
  }

  /** Creates a new PhoneSensorAudio RecordBuilder */
  public static org.radarcns.phoneSensors.PhoneSensorAudio.Builder newBuilder() {
    return new org.radarcns.phoneSensors.PhoneSensorAudio.Builder();
  }
  
  /** Creates a new PhoneSensorAudio RecordBuilder by copying an existing Builder */
  public static org.radarcns.phoneSensors.PhoneSensorAudio.Builder newBuilder(org.radarcns.phoneSensors.PhoneSensorAudio.Builder other) {
    return new org.radarcns.phoneSensors.PhoneSensorAudio.Builder(other);
  }
  
  /** Creates a new PhoneSensorAudio RecordBuilder by copying an existing PhoneSensorAudio instance */
  public static org.radarcns.phoneSensors.PhoneSensorAudio.Builder newBuilder(org.radarcns.phoneSensors.PhoneSensorAudio other) {
    return new org.radarcns.phoneSensors.PhoneSensorAudio.Builder(other);
  }
  
  /**
   * RecordBuilder for PhoneSensorAudio instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PhoneSensorAudio>
    implements org.apache.avro.data.RecordBuilder<PhoneSensorAudio> {

    private double time;
    private double timeReceived;
    private java.lang.String config;
    private java.lang.String data;

    /** Creates a new Builder */
    private Builder() {
      super(org.radarcns.phoneSensors.PhoneSensorAudio.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.radarcns.phoneSensors.PhoneSensorAudio.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.config)) {
        this.config = data().deepCopy(fields()[2].schema(), other.config);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PhoneSensorAudio instance */
    private Builder(org.radarcns.phoneSensors.PhoneSensorAudio other) {
            super(org.radarcns.phoneSensors.PhoneSensorAudio.SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeReceived)) {
        this.timeReceived = data().deepCopy(fields()[1].schema(), other.timeReceived);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.config)) {
        this.config = data().deepCopy(fields()[2].schema(), other.config);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'time' field */
    public java.lang.Double getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder setTime(double value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'time' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timeReceived' field */
    public java.lang.Double getTimeReceived() {
      return timeReceived;
    }
    
    /** Sets the value of the 'timeReceived' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder setTimeReceived(double value) {
      validate(fields()[1], value);
      this.timeReceived = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timeReceived' field has been set */
    public boolean hasTimeReceived() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timeReceived' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder clearTimeReceived() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'config' field */
    public java.lang.String getConfig() {
      return config;
    }
    
    /** Sets the value of the 'config' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder setConfig(java.lang.String value) {
      validate(fields()[2], value);
      this.config = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'config' field has been set */
    public boolean hasConfig() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'config' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder clearConfig() {
      config = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'data' field */
    public java.lang.String getData() {
      return data;
    }
    
    /** Sets the value of the 'data' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder setData(java.lang.String value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'data' field */
    public org.radarcns.phoneSensors.PhoneSensorAudio.Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PhoneSensorAudio build() {
      try {
        PhoneSensorAudio record = new PhoneSensorAudio();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Double) defaultValue(fields()[0]);
        record.timeReceived = fieldSetFlags()[1] ? this.timeReceived : (java.lang.Double) defaultValue(fields()[1]);
        record.config = fieldSetFlags()[2] ? this.config : (java.lang.String) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
